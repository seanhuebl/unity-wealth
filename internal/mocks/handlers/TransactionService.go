// Code generated by mockery v2.53.4. DO NOT EDIT.

package handlermocks

import (
	context "context"

	models "github.com/seanhuebl/unity-wealth/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, userID, req
func (_m *TransactionService) CreateTransaction(ctx context.Context, userID string, req models.NewTxRequest) (*models.Tx, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *models.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NewTxRequest) (*models.Tx, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NewTxRequest) *models.Tx); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NewTxRequest) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransaction provides a mock function with given fields: ctx, txnID, userID
func (_m *TransactionService) DeleteTransaction(ctx context.Context, txnID string, userID string) error {
	ret := _m.Called(ctx, txnID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, txnID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactionByID provides a mock function with given fields: ctx, userID, txnID
func (_m *TransactionService) GetTransactionByID(ctx context.Context, userID string, txnID string) (*models.Tx, error) {
	ret := _m.Called(ctx, userID, txnID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *models.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Tx, error)); ok {
		return rf(ctx, userID, txnID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Tx); ok {
		r0 = rf(ctx, userID, txnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, txnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserTransactions provides a mock function with given fields: ctx, userID, cursorDate, cursorID, pageSize
func (_m *TransactionService) ListUserTransactions(ctx context.Context, userID uuid.UUID, cursorDate *string, cursorID *string, pageSize int64) ([]models.Tx, string, string, bool, error) {
	ret := _m.Called(ctx, userID, cursorDate, cursorID, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListUserTransactions")
	}

	var r0 []models.Tx
	var r1 string
	var r2 string
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string, *string, int64) ([]models.Tx, string, string, bool, error)); ok {
		return rf(ctx, userID, cursorDate, cursorID, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string, *string, int64) []models.Tx); ok {
		r0 = rf(ctx, userID, cursorDate, cursorID, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *string, *string, int64) string); ok {
		r1 = rf(ctx, userID, cursorDate, cursorID, pageSize)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, *string, *string, int64) string); ok {
		r2 = rf(ctx, userID, cursorDate, cursorID, pageSize)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, uuid.UUID, *string, *string, int64) bool); ok {
		r3 = rf(ctx, userID, cursorDate, cursorID, pageSize)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(context.Context, uuid.UUID, *string, *string, int64) error); ok {
		r4 = rf(ctx, userID, cursorDate, cursorID, pageSize)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// UpdateTransaction provides a mock function with given fields: ctx, txnID, userID, req
func (_m *TransactionService) UpdateTransaction(ctx context.Context, txnID string, userID string, req models.NewTxRequest) (*models.Tx, error) {
	ret := _m.Called(ctx, txnID, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 *models.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.NewTxRequest) (*models.Tx, error)); ok {
		return rf(ctx, txnID, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.NewTxRequest) *models.Tx); ok {
		r0 = rf(ctx, txnID, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, models.NewTxRequest) error); ok {
		r1 = rf(ctx, txnID, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
