// Code generated by mockery v2.53.4. DO NOT EDIT.

package dbmocks

import (
	context "context"

	database "github.com/seanhuebl/unity-wealth/internal/database"
	mock "github.com/stretchr/testify/mock"
)

// UserQuerier is an autogenerated mock type for the UserQuerier type
type UserQuerier struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *UserQuerier) CreateUser(ctx context.Context, params database.CreateUserParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserQuerier) GetUserByEmail(ctx context.Context, email string) (database.GetUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.GetUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.GetUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.GetUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.GetUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserQuerier creates a new instance of UserQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserQuerier {
	mock := &UserQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
