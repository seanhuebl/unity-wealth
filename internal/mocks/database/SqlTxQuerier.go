// Code generated by mockery v2.53.4. DO NOT EDIT.

package dbmocks

import (
	context "context"

	database "github.com/seanhuebl/unity-wealth/internal/database"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// SqlTxQuerier is an autogenerated mock type for the SqlTxQuerier type
type SqlTxQuerier struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *SqlTxQuerier) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sql.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sql.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTx provides a mock function with given fields: tx
func (_m *SqlTxQuerier) WithTx(tx *sql.Tx) database.SqlTransactionalQuerier {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 database.SqlTransactionalQuerier
	if rf, ok := ret.Get(0).(func(*sql.Tx) database.SqlTransactionalQuerier); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SqlTransactionalQuerier)
		}
	}

	return r0
}

// NewSqlTxQuerier creates a new instance of SqlTxQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSqlTxQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *SqlTxQuerier {
	mock := &SqlTxQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
