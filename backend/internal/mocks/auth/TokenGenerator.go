// Code generated by mockery v2.53.4. DO NOT EDIT.

package authmocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// TokenGenerator is an autogenerated mock type for the TokenGenerator type
type TokenGenerator struct {
	mock.Mock
}

// MakeJWT provides a mock function with given fields: userID, expiresIn
func (_m *TokenGenerator) MakeJWT(userID uuid.UUID, expiresIn time.Duration) (string, error) {
	ret := _m.Called(userID, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for MakeJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration) (string, error)); ok {
		return rf(userID, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration) string); ok {
		r0 = rf(userID, expiresIn)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Duration) error); ok {
		r1 = rf(userID, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeRefreshToken provides a mock function with no fields
func (_m *TokenGenerator) MakeRefreshToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateJWT provides a mock function with given fields: tokenString
func (_m *TokenGenerator) ValidateJWT(tokenString string) (*jwt.RegisteredClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWT")
	}

	var r0 *jwt.RegisteredClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.RegisteredClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.RegisteredClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.RegisteredClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenGenerator creates a new instance of TokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenGenerator {
	mock := &TokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
