// Code generated by mockery v2.53.4. DO NOT EDIT.

package dbmocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TxRow is an autogenerated mock type for the TxRow type
type TxRow struct {
	mock.Mock
}

// GetFields provides a mock function with no fields
func (_m *TxRow) GetFields() (uuid.UUID, uuid.UUID, time.Time, string, int64, int32) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFields")
	}

	var r0 uuid.UUID
	var r1 uuid.UUID
	var r2 time.Time
	var r3 string
	var r4 int64
	var r5 int32
	if rf, ok := ret.Get(0).(func() (uuid.UUID, uuid.UUID, time.Time, string, int64, int32)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func() uuid.UUID); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func() time.Time); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(time.Time)
	}

	if rf, ok := ret.Get(3).(func() string); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func() int64); ok {
		r4 = rf()
	} else {
		r4 = ret.Get(4).(int64)
	}

	if rf, ok := ret.Get(5).(func() int32); ok {
		r5 = rf()
	} else {
		r5 = ret.Get(5).(int32)
	}

	return r0, r1, r2, r3, r4, r5
}

// NewTxRow creates a new instance of TxRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxRow {
	mock := &TxRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
